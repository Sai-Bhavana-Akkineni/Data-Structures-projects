#include<stdio.h> 
#include<stdlib.h> 
//Structure of node in linked list for Queue 1 
struct node_qu1  
{ 
   struct node_qu1 *next1; 
   int data1; 
}; 
//f1 is node from which deletion will be done 
//r1 is node from which insertion will be done 
//before any operation,f1 and r1 will set to NULL 
struct node_qu1 *f1 = NULL, *r1 = NULL, *q1 = NULL; 
//Structure of node in linked list for Queue 2 
struct node_qu2 
{ 
   struct node_qu2 *next2; 
   int data2; 
}; 
//f2 is node from which deletion will be done 
//r2 is node from which insertion will be done 
//before any operation,f2 and r2 will set to NULL 
struct node_qu2 *f2 = NULL, *r2 = NULL, *q2 = NULL; 
//function definition for inserting i.e enqueue into Queue 1 
void enqueue1(int a)  
{ 
//Three steps for insertion 1.Declare node 2.Allocate dynamic memory 3.Set node pointers  
   struct node_qu1 *np1; //declared new node as np1 
   np1=(struct node_qu1 *)malloc(sizeof(struct node_qu1));//allocate dynamic memory to np1 
   np1->data1 = a;//set pointer of np1 
   np1->next1 = NULL;//set pointer of np1 
   if (f1 == NULL) //if f1 is NULL means Queue 1 is empty so new node will become f1 and r1 
   { 
      r1 = np1; //new node is np1,make it as r1 
      f1 = r1;//make r1 as f1 
   }//end of if  
   else //f1 is not NULL means elements are there in Queue 1  
   { 
      r1->next1 = np1;//make np1 as r1->next1  
      r1 = np1;//make np1 as r1 
   }//end of else  
}//end of enqueue1 
//function definition for deleting i.e dequeue from Queue 1 
int dequeue1()  
{ 
   int a; 
   if(f1 == NULL) //check if f1 is NULL. If condtion true, Queue 1 is empty  
   {	 
      printf("No elements present in queue\n"); 
   }  
   else //Queue 1 is not empty  
   { 
      q1 = f1; //choose which node to be deleted i.e f1,store it to q1 
      f1 = f1->next1;//f1 will change to next node  
      a = q1->data1; //node deleted will be q1 so data part of q1 is store into a 
  free(q1);//release memory  
      return a;//return a where dequeue1() function is called  
   }//end of else 
}//end of dequeue1() 
 
